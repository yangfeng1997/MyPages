{"version":3,"file":"index-CoHE-pvH.js","sources":["../../src/client/define.ts","../../src/client/utils/createSearchWorker.ts","../../src/client/helpers/search.ts"],"sourcesContent":["import type { ExactLocaleConfig, KeyOptions } from '@vuepress/helper/client'\nimport type {\n  SlimSearchCustomFieldFormatter,\n  SlimSearchLocaleData,\n} from '../shared/index.js'\n\ntype SlimSearchClientCustomFiledConfig = Record<\n  string,\n  SlimSearchCustomFieldFormatter\n>\n\ndeclare const __SLIMSEARCH_CUSTOM_FIELDS__: SlimSearchClientCustomFiledConfig\ndeclare const __SLIMSEARCH_OPTIONS__: {\n  searchDelay: number\n  suggestDelay: number\n  queryHistoryCount: number\n  resultHistoryCount: number\n  hotKeys: KeyOptions[]\n  worker: string\n}\ndeclare const __SLIMSEARCH_LOCALES__: ExactLocaleConfig<SlimSearchLocaleData>\n\nexport const customFieldConfig = __SLIMSEARCH_CUSTOM_FIELDS__\nexport const options = __SLIMSEARCH_OPTIONS__\nexport const locales = __SLIMSEARCH_LOCALES__\n","import { values } from '@vuepress/helper/client'\nimport type { SearchOptions } from 'slimsearch'\n\nimport type { IndexItem } from '../../shared/index.js'\nimport { options } from '../define.js'\nimport type { QueryResult, SearchResult } from '../typings/index.js'\n\ndeclare const __VUEPRESS_BASE__: string\ndeclare const __VUEPRESS_DEV__: boolean\n\ninterface PromiseItem {\n  id: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  resolve: (args: any) => void\n  reject: (err: Error) => void\n}\n\nexport interface SearchWorker {\n  /**\n   * Get both suggestions and results\n   *\n   * 同时获取建议和结果\n   *\n   * @param query - search query 搜索词\n   * @param localePath - locale path 语言路径\n   * @param options - search options 搜索选项\n   */\n  all: (\n    query: string,\n    localePath?: string,\n    options?: SearchOptions<string, IndexItem>,\n  ) => Promise<QueryResult>\n\n  /**\n   * Get suggestions\n   *\n   * 获取建议\n   *\n   * @param query - search query 搜索词\n   * @param localePath - locale path 语言路径\n   * @param searchOptions - search options 搜索选项\n   */\n  suggest: (\n    query: string,\n    localePath?: string,\n    options?: SearchOptions<string, IndexItem>,\n  ) => Promise<string[]>\n\n  /**\n   * Get search results\n   *\n   * 获取搜索结果\n   *\n   * @param query - search query 搜索词\n   * @param localePath - locale path 语言路径\n   * @param searchOptions - search options 搜索选项\n   */\n  search: (\n    query: string,\n    localePath?: string,\n    options?: SearchOptions<string, IndexItem>,\n  ) => Promise<SearchResult[]>\n\n  /**\n   * Terminate current worker\n   *\n   * 终止当前 worker\n   */\n  terminate: () => void\n}\n\nconst ERR_MSG = 'Canceled because of new search request.'\n\nexport const createSearchWorker = (): SearchWorker => {\n  const worker = new Worker(\n    __VUEPRESS_DEV__\n      ? new URL('./worker/index.js', import.meta.url)\n      : `${__VUEPRESS_BASE__}${options.worker}`,\n    __VUEPRESS_DEV__ ? { type: 'module' } : {},\n  )\n\n  const states: Record<'all' | 'search' | 'suggest', PromiseItem | null> = {\n    suggest: null,\n    search: null,\n    all: null,\n  }\n\n  worker.addEventListener(\n    'message',\n    ({\n      data,\n    }: MessageEvent<\n      | ['all', number, QueryResult]\n      | ['search', number, SearchResult[]]\n      | ['suggest', number, string[]]\n    >) => {\n      const [type, timestamp, result] = data\n      const state = states[type]\n\n      if (state?.id === timestamp) state.resolve(result)\n    },\n  )\n\n  worker.addEventListener('error', (err) => {\n    // eslint-disable-next-line no-console\n    console.warn('Search Worker error:', err)\n  })\n\n  return {\n    suggest: (\n      query: string,\n      locale?: string,\n      searchOptions?: SearchOptions<string, IndexItem>,\n    ): Promise<string[]> =>\n      new Promise((resolve, reject) => {\n        states.suggest?.reject(new Error(ERR_MSG))\n        const id = Date.now()\n\n        worker.postMessage({\n          type: 'suggest',\n          id,\n          query,\n          locale,\n          options: searchOptions,\n        })\n        states.suggest = { id, resolve, reject }\n      }),\n\n    search: (\n      query: string,\n      locale?: string,\n      searchOptions?: SearchOptions<string, IndexItem>,\n    ): Promise<SearchResult[]> =>\n      new Promise<SearchResult[]>((resolve, reject) => {\n        states.search?.reject(new Error(ERR_MSG))\n\n        const id = Date.now()\n\n        worker.postMessage({\n          type: 'search',\n          id,\n          query,\n          locale,\n          options: searchOptions,\n        })\n        states.search = { id, resolve, reject }\n      }),\n\n    all: (\n      query: string,\n      locale?: string,\n      searchOptions?: SearchOptions<string, IndexItem>,\n    ): Promise<QueryResult> =>\n      new Promise<QueryResult>((resolve, reject) => {\n        states.all?.reject(new Error(ERR_MSG))\n\n        const id = Date.now()\n\n        worker.postMessage({\n          type: 'all',\n          id,\n          query,\n          locale,\n          options: searchOptions,\n        })\n        states.all = { id, resolve, reject }\n      }),\n\n    terminate: (): void => {\n      worker.terminate()\n\n      values(states).forEach((item) => {\n        item?.reject(new Error('Worker has been terminated.'))\n      })\n    },\n  }\n}\n","import { watchImmediate } from '@vueuse/core'\nimport type { App, ComputedRef, InjectionKey, MaybeRefOrGetter, Ref } from 'vue'\nimport { computed, inject, isRef, readonly, ref } from 'vue'\nimport type { PageData } from 'vuepress/client'\nimport { useRouteLocale } from 'vuepress/client'\n\nimport { isFunction } from 'vuepress/shared'\nimport type { SearchResult, WorkerSearchOptions } from '../typings/index.js'\n\ndeclare const __VUEPRESS_DEV__: boolean\n\nexport interface SearchLocaleOptions extends WorkerSearchOptions {\n  /** A function to split words */\n  querySplitter?: (query: string) => Promise<string[]>\n\n  /** A function to filter suggestions */\n  suggestionsFilter?: (\n    suggestions: string[],\n    query: string,\n    locale: string,\n    pageData: PageData,\n  ) => string[]\n\n  /** A function to filter search results */\n  resultsFilter?: (\n    results: SearchResult[],\n    query: string,\n    locale: string,\n    pageData: PageData,\n  ) => SearchResult[]\n}\n\nexport interface SearchOptions extends SearchLocaleOptions {\n  locales?: Record<string, SearchLocaleOptions>\n}\n\nconst searchOptions: Ref<SearchOptions> = ref({})\n\nconst slimsearchSymbol: InjectionKey<Ref<SearchOptions>> = Symbol(\n  __VUEPRESS_DEV__ ? 'slimsearch' : '',\n)\n\nexport const defineSearchConfig = (\n  options: MaybeRefOrGetter<SearchOptions>,\n): void => {\n  if (isRef(options)) {\n    watchImmediate(\n      () => options.value,\n      (value) => {\n        searchOptions.value = value\n      },\n    )\n  } else if (isFunction(options)) {\n    watchImmediate(computed(options), (value) => {\n      searchOptions.value = value\n    })\n  } else {\n    searchOptions.value = options\n  }\n}\n\nexport const useSearchOptions = (): ComputedRef<SearchLocaleOptions> => {\n  const routeLocale = useRouteLocale()\n  const options = inject(slimsearchSymbol)!\n\n  return computed(() => {\n    const { locales = {}, ...rest } = options.value\n\n    return {\n      ...rest,\n      ...locales[routeLocale.value],\n    }\n  })\n}\n\nexport const injectSearchConfig = (app: App): void => {\n  app.provide(slimsearchSymbol, readonly(searchOptions))\n}\n"],"names":["customFieldConfig","options","locales","ERR_MSG","createSearchWorker","worker","states","data","type","timestamp","result","state","err","query","locale","searchOptions","resolve","reject","id","values","item","ref","slimsearchSymbol","defineSearchConfig","isRef","watchImmediate","value","isFunction","computed","useSearchOptions","routeLocale","useRouteLocale","inject","rest","injectSearchConfig","app","readonly"],"mappings":"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"}