import { MaybeRefOrGetter, ComputedRef, App } from 'vue';
import { PageData } from 'vuepress/client';
import { SearchOptions as SearchOptions$1 } from 'slimsearch';

type Word = string | [tag: string, content: string];
interface TitleMatchedItem {
    type: 'title';
    id: number;
    display: Word[][];
}
interface HeadingMatchedItem {
    type: 'heading';
    id: number;
    anchor: string;
    display: Word[][];
}
interface ContentMatchedItem {
    type: 'text';
    id: number;
    header?: string;
    anchor?: string;
    display: Word[][];
}
interface CustomMatchedItem {
    type: 'customField';
    id: number;
    index: string;
    display: Word[][];
}
type MatchedItem = ContentMatchedItem | CustomMatchedItem | HeadingMatchedItem | TitleMatchedItem;
interface SearchResult {
    title: string;
    contents: MatchedItem[];
}
interface QueryResult {
    suggestions: string[];
    results: SearchResult[];
}

type PageIndexId = `${number}`;
interface PageIndexItem {
    id: PageIndexId;
    /** Heading */ h: string;
    /** Text */ t?: string[];
}
type SectionIndexId = `${PageIndexId}#${string}`;
interface SectionIndexItem {
    id: SectionIndexId;
    /** Heading */ h: string;
    /** Text */ t?: string[];
}
interface CustomFieldIndexItem {
    id: string;
    /** CustomFields */ c: string[];
}
type IndexItem = CustomFieldIndexItem | PageIndexItem | SectionIndexItem;

type WorkerSearchOptions = Omit<SearchOptions$1<string, IndexItem>, 'boostDocument' | 'fields' | 'filter' | 'processTerm' | 'tokenize'>;

interface SearchLocaleOptions extends WorkerSearchOptions {
    /** A function to split words */
    querySplitter?: (query: string) => Promise<string[]>;
    /** A function to filter suggestions */
    suggestionsFilter?: (suggestions: string[], query: string, locale: string, pageData: PageData) => string[];
    /** A function to filter search results */
    resultsFilter?: (results: SearchResult[], query: string, locale: string, pageData: PageData) => SearchResult[];
}
interface SearchOptions extends SearchLocaleOptions {
    locales?: Record<string, SearchLocaleOptions>;
}
declare const defineSearchConfig: (options: MaybeRefOrGetter<SearchOptions>) => void;
declare const useSearchOptions: () => ComputedRef<SearchLocaleOptions>;
declare const injectSearchConfig: (app: App) => void;

interface SearchWorker {
    /**
     * Get both suggestions and results
     *
     * 同时获取建议和结果
     *
     * @param query - search query 搜索词
     * @param localePath - locale path 语言路径
     * @param options - search options 搜索选项
     */
    all: (query: string, localePath?: string, options?: SearchOptions$1<string, IndexItem>) => Promise<QueryResult>;
    /**
     * Get suggestions
     *
     * 获取建议
     *
     * @param query - search query 搜索词
     * @param localePath - locale path 语言路径
     * @param searchOptions - search options 搜索选项
     */
    suggest: (query: string, localePath?: string, options?: SearchOptions$1<string, IndexItem>) => Promise<string[]>;
    /**
     * Get search results
     *
     * 获取搜索结果
     *
     * @param query - search query 搜索词
     * @param localePath - locale path 语言路径
     * @param searchOptions - search options 搜索选项
     */
    search: (query: string, localePath?: string, options?: SearchOptions$1<string, IndexItem>) => Promise<SearchResult[]>;
    /**
     * Terminate current worker
     *
     * 终止当前 worker
     */
    terminate: () => void;
}
declare const createSearchWorker: () => SearchWorker;

export { createSearchWorker, defineSearchConfig, injectSearchConfig, useSearchOptions };
export type { SearchLocaleOptions, SearchOptions, SearchWorker };
