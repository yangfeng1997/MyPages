import * as vue from 'vue';
import { PropType, VNode, Ref, MaybeRefOrGetter, App } from 'vue';
import Reveal from 'reveal.js';

type RevealJsTheme = 'auto' | 'beige' | 'black' | 'blood' | 'league' | 'moon' | 'night' | 'serif' | 'simple' | 'sky' | 'solarized' | 'white';

declare const RevealJs: vue.DefineComponent<vue.ExtractPropTypes<{
    /**
     * Presentation id
     *
     * 幻灯片 id
     */
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Presentation code
     *
     * 幻灯片代码
     */
    code: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Presentation theme
     *
     * 幻灯片主题
     */
    theme: {
        type: PropType<RevealJsTheme>;
        default: string;
    };
}>, () => VNode, {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.PublicProps, Readonly<vue.ExtractPropTypes<{
    /**
     * Presentation id
     *
     * 幻灯片 id
     */
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Presentation code
     *
     * 幻灯片代码
     */
    code: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Presentation theme
     *
     * 幻灯片主题
     */
    theme: {
        type: PropType<RevealJsTheme>;
        default: string;
    };
}>> & Readonly<{}>, {
    theme: RevealJsTheme;
}, {}, {}, {}, string, vue.ComponentProvideOptions, true, {}, any>;

type RevealJsOptions = Partial<Omit<Reveal.Options, 'embedded'>>;
type RevealJsOptionsRef = Ref<RevealJsOptions>;
declare const defineRevealJsConfig: (options: MaybeRefOrGetter<RevealJsOptions>) => void;
declare const useRevealJsConfig: () => RevealJsOptionsRef;
declare const injectRevealJsConfig: (app: App) => void;

export { RevealJs, defineRevealJsConfig, injectRevealJsConfig, useRevealJsConfig };
export type { RevealJsOptions, RevealJsOptionsRef };
