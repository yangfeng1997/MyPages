{"version":3,"file":"index.js","sources":["../../src/node/revealJs.ts","../../src/node/utils.ts","../../src/node/prepare/prepareClientConfigFile.ts","../../src/node/prepare/prepareRevealJsEntry.ts","../../src/node/revealJsPlugin.ts"],"sourcesContent":["import type { MarkdownItUMLOptions } from '@mdit/plugin-uml'\nimport { uml } from '@mdit/plugin-uml'\nimport { encodeData } from '@vuepress/helper'\nimport type { PluginSimple } from 'markdown-it'\n\nexport const revealJs: PluginSimple = (md) => {\n  md.use<MarkdownItUMLOptions>(uml, {\n    name: 'revealjs',\n    open: 'slidestart',\n    close: 'slideend',\n    render: (tokens, index) => {\n      const token = tokens[index]\n      const key = `revealjs-${index}`\n      const { content, info } = token\n\n      return `<RevealJs id=\"${key}\" code=\"${encodeData(content)}\" theme=\"${\n        info.trim() || 'auto'\n      }\"></RevealJs>`\n    },\n  })\n}\n","import { Logger } from '@vuepress/helper'\n\nexport const PLUGIN_NAME = '@vuepress/plugin-revealjs'\n\nexport const logger = new Logger(PLUGIN_NAME)\n","import { getModulePath } from '@vuepress/helper'\nimport type { App } from 'vuepress'\nimport type { RevealJsTheme } from '../../shared/index.js'\nimport { PLUGIN_NAME } from '../utils.js'\n\nconst CLIENT_ENTRY = getModulePath(`${PLUGIN_NAME}/client`, import.meta)\n\nconst REVEAL_THEME_CONFIG: [name: RevealJsTheme, fonts?: string[]][] = [\n  ['auto'],\n  ['beige', ['lato']],\n  ['black'],\n  ['blood', ['ubuntu']],\n  ['league'],\n  ['moon'],\n  ['night', ['montserrat', 'open-sans']],\n  ['serif'],\n  ['simple', ['lato', 'news-cycle']],\n  ['sky', ['open-sans', 'quicksand']],\n  ['solarized', ['lato']],\n  ['white'],\n]\n\nexport const prepareClientConfigFile = async (\n  app: App,\n  revealThemes: RevealJsTheme[],\n  layout: string | false,\n): Promise<string> => {\n  const fonts = new Set<string>(['league-gothic', 'source-sans-pro'])\n  const themes = new Set<string>()\n\n  revealThemes.forEach((theme) => {\n    const config = REVEAL_THEME_CONFIG.find(([name]) => name === theme)\n\n    if (config) {\n      const [themeName, fontNames] = config\n\n      themes.add(themeName)\n      fontNames?.forEach((fontName) => fonts.add(fontName))\n    }\n  })\n\n  return app.writeTemp(\n    'revealjs/config.js',\n    `\\\nimport { RevealJs, injectRevealJsConfig } from \"${CLIENT_ENTRY}\";\n${layout ? `import { SlidePage } from \"${getModulePath(`${PLUGIN_NAME}/layouts`, import.meta)}\";\\n` : ''}\\\n\nimport \"${getModulePath('reveal.js/dist/reveal.css', import.meta)}\";\nimport \"${getModulePath(`${PLUGIN_NAME}/styles/base.css`, import.meta)}\";\nimport \"${getModulePath(`${PLUGIN_NAME}/styles/vars.css`, import.meta)}\";\n${Array.from(fonts)\n  .map(\n    (name) =>\n      `import \"${getModulePath(`${PLUGIN_NAME}/styles/fonts/${name}.css`, import.meta)}\";`,\n  )\n  .join('\\n')}\n${Array.from(themes)\n  .map(\n    (name) =>\n      `import \"${getModulePath(`${PLUGIN_NAME}/styles/themes/${name}.css`, import.meta)}\";`,\n  )\n  .join('\\n')}\n\nexport default {\n  enhance: ({ app }) => {\n    injectRevealJsConfig(app)\n    app.component(\"RevealJs\", RevealJs)\n  },\n${layout ? `  layouts: { \"${layout}\": SlidePage },\\n` : ''}\\\n};\n`,\n  )\n}\n","import { getModulePath } from '@vuepress/helper'\nimport type { App } from 'vuepress/core'\n\nimport type { RevealJsPlugin } from '../options.js'\n\nexport const prepareRevealJsEntry = async (\n  app: App,\n  revealPlugins: RevealJsPlugin[],\n): Promise<void> => {\n  await app.writeTemp(\n    'revealjs/index.js',\n    `\\\nexport const useRevealJs = () => Promise.all(\n  __VUEPRESS_SSR__\n    ? []\n    : [\n        import(/* webpackChunkName: \"reveal\" */ \"${getModulePath(\n          'reveal.js/dist/reveal.esm.js',\n          import.meta,\n        )}\").then(({ default: RevealJs }) => RevealJs),\n        import(/* webpackChunkName: \"reveal\" */ \"${getModulePath(\n          'reveal.js/plugin/markdown/markdown.esm.js',\n          import.meta,\n        )}\").then(({ default: plugin }) => plugin),\n      ${revealPlugins\n        .map(\n          (plugin) =>\n            `  import(/* webpackChunkName: \"reveal\" */ \"${getModulePath(\n              `reveal.js/plugin/${plugin}/${plugin}.esm.js`,\n              import.meta,\n            )}\").then(({ default: plugin }) => plugin)`,\n        )\n        .join(',\\n')}\n      ]\n  );\n`,\n  )\n}\n","import {\n  addViteOptimizeDepsExclude,\n  addViteSsrExternal,\n} from '@vuepress/helper'\nimport type { Plugin } from 'vuepress/core'\nimport type { RevealJsPluginOptions } from './options.js'\nimport {\n  prepareClientConfigFile,\n  prepareRevealJsEntry,\n} from './prepare/index.js'\nimport { revealJs } from './revealJs.js'\nimport { PLUGIN_NAME } from './utils.js'\n\nexport const revealJsPlugin = ({\n  plugins = [],\n  themes = ['auto'],\n  layout = 'SlidePage',\n}: RevealJsPluginOptions = {}): Plugin => {\n  return {\n    name: PLUGIN_NAME,\n\n    extendsBundlerOptions: (bundlerOptions, app) => {\n      addViteOptimizeDepsExclude(bundlerOptions, app, [\n        'reveal.js/dist/reveal.esm.js',\n        'reveal.js/plugin/markdown/markdown.esm.js',\n        ...plugins.map(\n          (plugin) => `reveal.js/plugin/${plugin}/${plugin}.esm.js`,\n        ),\n      ])\n\n      addViteSsrExternal(bundlerOptions, app, 'reveal.js')\n    },\n\n    extendsMarkdown: (md) => {\n      md.use(revealJs)\n    },\n\n    onPrepared: async (app) => prepareRevealJsEntry(app, plugins),\n\n    clientConfigFile: (app) => prepareClientConfigFile(app, themes, layout),\n  }\n}\n"],"names":["revealJs","md","uml","tokens","index","token","key","content","info","encodeData","PLUGIN_NAME","Logger","CLIENT_ENTRY","getModulePath","REVEAL_THEME_CONFIG","prepareClientConfigFile","app","revealThemes","layout","fonts","themes","theme","config","name","themeName","fontNames","fontName","prepareRevealJsEntry","revealPlugins","plugin","revealJsPlugin","plugins","bundlerOptions","addViteOptimizeDepsExclude","addViteSsrExternal"],"mappings":"4KAKa,MAAAA,EAA0BC,GAAO,CAC5CA,EAAG,IAA0BC,EAAK,CAChC,KAAM,WACN,KAAM,aACN,MAAO,WACP,OAAQ,CAACC,EAAQC,IAAU,CACzB,MAAMC,EAAQF,EAAOC,CAAK,EACpBE,EAAM,YAAYF,CAAK,GACvB,CAAE,QAAAG,EAAS,KAAAC,CAAK,EAAIH,EAE1B,MAAO,iBAAiBC,CAAG,WAAWG,EAAWF,CAAO,CAAC,YACvDC,EAAK,KAAK,GAAK,MACjB,eACF,CACF,CAAC,CACH,EClBaE,EAAc,4BAEL,IAAIC,EAAOD,CAAW,ECC5C,MAAME,EAAeC,EAAc,GAAGH,CAAW,UAAW,WAAW,EAEjEI,EAAiE,CACrE,CAAC,MAAM,EACP,CAAC,QAAS,CAAC,MAAM,CAAC,EAClB,CAAC,OAAO,EACR,CAAC,QAAS,CAAC,QAAQ,CAAC,EACpB,CAAC,QAAQ,EACT,CAAC,MAAM,EACP,CAAC,QAAS,CAAC,aAAc,WAAW,CAAC,EACrC,CAAC,OAAO,EACR,CAAC,SAAU,CAAC,OAAQ,YAAY,CAAC,EACjC,CAAC,MAAO,CAAC,YAAa,WAAW,CAAC,EAClC,CAAC,YAAa,CAAC,MAAM,CAAC,EACtB,CAAC,OAAO,CACV,EAEaC,EAA0B,MACrCC,EACAC,EACAC,IACoB,CACpB,MAAMC,EAAQ,IAAI,IAAY,CAAC,gBAAiB,iBAAiB,CAAC,EAC5DC,EAAS,IAAI,IAEnB,OAAAH,EAAa,QAASI,GAAU,CAC9B,MAAMC,EAASR,EAAoB,KAAK,CAAC,CAACS,CAAI,IAAMA,IAASF,CAAK,EAElE,GAAIC,EAAQ,CACV,KAAM,CAACE,EAAWC,CAAS,EAAIH,EAE/BF,EAAO,IAAII,CAAS,EACpBC,GAAW,QAASC,GAAaP,EAAM,IAAIO,CAAQ,CAAC,CACtD,CACF,CAAC,EAEMV,EAAI,UACT,qBACA,mDAC8CJ,CAAY;AAAA,EAC5DM,EAAS,8BAA8BL,EAAc,GAAGH,CAAW,WAAY,WAAW,CAAC;AAAA,EAAS,EAAE;AAAA,UAE9FG,EAAc,4BAA6B,WAAW,CAAC;AAAA,UACvDA,EAAc,GAAGH,CAAW,mBAAoB,WAAW,CAAC;AAAA,UAC5DG,EAAc,GAAGH,CAAW,mBAAoB,WAAW,CAAC;AAAA,EACpE,MAAM,KAAKS,CAAK,EACf,IACEI,GACC,WAAWV,EAAc,GAAGH,CAAW,iBAAiBa,CAAI,OAAQ,WAAW,CAAC,IACpF,EACC,KAAK;AAAA,CAAI,CAAC;AAAA,EACX,MAAM,KAAKH,CAAM,EAChB,IACEG,GACC,WAAWV,EAAc,GAAGH,CAAW,kBAAkBa,CAAI,OAAQ,WAAW,CAAC,IACrF,EACC,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOXL,EAAS,iBAAiBA,CAAM;AAAA,EAAsB,EAAE;AAAA,CAGxD,CACF,ECnEaS,EAAuB,MAClCX,EACAY,IACkB,CAClB,MAAMZ,EAAI,UACR,oBACA;AAAA;AAAA;AAAA;AAAA,mDAK+CH,EACzC,+BACA,WACF,CAAC;AAAA,mDAC0CA,EACzC,4CACA,WACF,CAAC;AAAA,QACDe,EACC,IACEC,GACC,8CAA8ChB,EAC5C,oBAAoBgB,CAAM,IAAIA,CAAM,UACpC,WACF,CAAC,0CACL,EACC,KAAK;AAAA,CAAK,CAAC;AAAA;AAAA;AAAA,CAIlB,CACF,ECxBaC,EAAiB,CAAC,CAC7B,QAAAC,EAAU,CAAA,EACV,OAAAX,EAAS,CAAC,MAAM,EAChB,OAAAF,EAAS,WACX,EAA2B,CAClB,KAAA,CACL,KAAMR,EAEN,sBAAuB,CAACsB,EAAgBhB,IAAQ,CAC9CiB,EAA2BD,EAAgBhB,EAAK,CAC9C,+BACA,4CACA,GAAGe,EAAQ,IACRF,GAAW,oBAAoBA,CAAM,IAAIA,CAAM,SAClD,CACF,CAAC,EAEDK,EAAmBF,EAAgBhB,EAAK,WAAW,CACrD,EAEA,gBAAkBf,GAAO,CACvBA,EAAG,IAAID,CAAQ,CACjB,EAEA,WAAY,MAAOgB,GAAQW,EAAqBX,EAAKe,CAAO,EAE5D,iBAAmBf,GAAQD,EAAwBC,EAAKI,EAAQF,CAAM,CACxE"}