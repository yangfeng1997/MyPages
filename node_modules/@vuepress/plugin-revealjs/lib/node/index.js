import{uml as u}from"@mdit/plugin-uml";import{encodeData as v,Logger as $,getModulePath as t,addViteOptimizeDepsExclude as g,addViteSsrExternal as j}from"@vuepress/helper";const p=r=>{r.use(u,{name:"revealjs",open:"slidestart",close:"slideend",render:(o,a)=>{const e=o[a],l=`revealjs-${a}`,{content:s,info:i}=e;return`<RevealJs id="${l}" code="${v(s)}" theme="${i.trim()||"auto"}"></RevealJs>`}})},n="@vuepress/plugin-revealjs";new $(n);const f=t(`${n}/client`,import.meta),h=[["auto"],["beige",["lato"]],["black"],["blood",["ubuntu"]],["league"],["moon"],["night",["montserrat","open-sans"]],["serif"],["simple",["lato","news-cycle"]],["sky",["open-sans","quicksand"]],["solarized",["lato"]],["white"]],w=async(r,o,a)=>{const e=new Set(["league-gothic","source-sans-pro"]),l=new Set;return o.forEach(s=>{const i=h.find(([m])=>m===s);if(i){const[m,c]=i;l.add(m),c?.forEach(d=>e.add(d))}}),r.writeTemp("revealjs/config.js",`import { RevealJs, injectRevealJsConfig } from "${f}";
${a?`import { SlidePage } from "${t(`${n}/layouts`,import.meta)}";
`:""}
import "${t("reveal.js/dist/reveal.css",import.meta)}";
import "${t(`${n}/styles/base.css`,import.meta)}";
import "${t(`${n}/styles/vars.css`,import.meta)}";
${Array.from(e).map(s=>`import "${t(`${n}/styles/fonts/${s}.css`,import.meta)}";`).join(`
`)}
${Array.from(l).map(s=>`import "${t(`${n}/styles/themes/${s}.css`,import.meta)}";`).join(`
`)}

export default {
  enhance: ({ app }) => {
    injectRevealJsConfig(app)
    app.component("RevealJs", RevealJs)
  },
${a?`  layouts: { "${a}": SlidePage },
`:""}};
`)},y=async(r,o)=>{await r.writeTemp("revealjs/index.js",`export const useRevealJs = () => Promise.all(
  __VUEPRESS_SSR__
    ? []
    : [
        import(/* webpackChunkName: "reveal" */ "${t("reveal.js/dist/reveal.esm.js",import.meta)}").then(({ default: RevealJs }) => RevealJs),
        import(/* webpackChunkName: "reveal" */ "${t("reveal.js/plugin/markdown/markdown.esm.js",import.meta)}").then(({ default: plugin }) => plugin),
      ${o.map(a=>`  import(/* webpackChunkName: "reveal" */ "${t(`reveal.js/plugin/${a}/${a}.esm.js`,import.meta)}").then(({ default: plugin }) => plugin)`).join(`,
`)}
      ]
  );
`)},k=({plugins:r=[],themes:o=["auto"],layout:a="SlidePage"}={})=>({name:n,extendsBundlerOptions:(e,l)=>{g(e,l,["reveal.js/dist/reveal.esm.js","reveal.js/plugin/markdown/markdown.esm.js",...r.map(s=>`reveal.js/plugin/${s}/${s}.esm.js`)]),j(e,l,"reveal.js")},extendsMarkdown:e=>{e.use(p)},onPrepared:async e=>y(e,r),clientConfigFile:e=>w(e,o,a)});export{p as revealJs,k as revealJsPlugin};
//# sourceMappingURL=index.js.map
